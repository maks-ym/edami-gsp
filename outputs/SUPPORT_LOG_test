============== Sun Jun 18 15:59:25 2017
----------------------------------------------------------
=============== SUPPORT ===============
(support) -------- parameters: --------
(support) - winSize: 0
(support) - minGap:  0
(support) - maxGap:  500
(support) - minSup:  1
(support) --------  reading GSP --------
(support) Current GSP (read line): <( )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 0
(support) The same but from gsp vector1: 0
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 1
(support)Current GSP (from structure): (show_gsp)ITEMS: <( )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(support)***********************************END of GSP check for last CId
(support)support - 4
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 3 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 3=> number
current element's items: 3 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 1
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 3 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time25 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 25; element.start_time25
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 4
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 3 4 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 3=> number
current element's items: 3 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 4=> number
current element's items: 3 4 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 2
(support) The same but from gsp vector1: 2
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 1
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 3 4 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '4', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '4', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [5 <= 0]: 0
(checkElement) winSize check. element.end_time 25; element.start_time20
(checkElement) checking item '3', time: 25
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '4', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 8in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(support)***********************************END of GSP check for last CId
(support)support - 3
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 3 4 5 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 3=> number
current element's items: 3 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 4=> number
current element's items: 3 4 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 5=> number
current element's items: 3 4 5 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 3
(support) The same but from gsp vector1: 3
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 1
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 3 4 5 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 3
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '4', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [5 <= 0]: 0
(checkElement) winSize check. element.end_time 20; element.start_time15
(checkElement) checking item '3', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 20  become 20
(resetElementsTimes)elem.end_time was 20  become 20
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 3
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '4', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 3
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 3
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '4', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [5 <= 0]: 0
(checkElement) winSize check. element.end_time 25; element.start_time20
(checkElement) checking item '3', time: 25
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '4', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 8in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(support)***********************************END of GSP check for last CId
(support)support - 3
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 3 5 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 3=> number
current element's items: 3 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 5=> number
current element's items: 3 5 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 2
(support) The same but from gsp vector1: 2
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 1
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 3 5 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [5 <= 0]: 0
(checkElement) winSize check. element.end_time 20; element.start_time15
(checkElement) checking item '3', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 20  become 20
(resetElementsTimes)elem.end_time was 20  become 20
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [5 <= 0]: 0
(checkElement) winSize check. element.end_time 25; element.start_time20
(checkElement) checking item '3', time: 25
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 8in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(support)***********************************END of GSP check for last CId
(support)support - 3
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 4 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 4=> number
current element's items: 4 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 1
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 4 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 4
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 4 )( 3 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 4=> number
current element's items: 4 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: 3=> number
current element's items: 3 
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #2: 1
(support) The same but from gsp vector2: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 2
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 4 )( 3 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 16
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 16
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(resetElementsTimes)elem.start_time was 20  become 20
(resetElementsTimes)elem.end_time was 20  become 20
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 16
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 16
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 6 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 6in data
(checkGsp)[forward faze]Element 1 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkGsp)[forward faze]Element 1 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 21
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 21
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time25 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 25; element.start_time25
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 2
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 4 5 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 4=> number
current element's items: 4 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 5=> number
current element's items: 4 5 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 2
(support) The same but from gsp vector1: 2
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 1
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 4 5 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [5 <= 0]: 0
(checkElement) winSize check. element.end_time 20; element.start_time15
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 20  become 20
(resetElementsTimes)elem.end_time was 20  become 20
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 4
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 4 5 )( 3 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 4=> number
current element's items: 4 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 5=> number
current element's items: 4 5 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 2
(support) The same but from gsp vector1: 2
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: 3=> number
current element's items: 3 
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #2: 1
(support) The same but from gsp vector2: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 2
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 4 5 )( 3 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [5 <= 0]: 0
(checkElement) winSize check. element.end_time 20; element.start_time15
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 21
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 21
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 1 2 3 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time25 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 25; element.start_time25
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 20  become 20
(resetElementsTimes)elem.end_time was 20  become 20
(resetElementsTimes)elem.start_time was 25  become 25
(resetElementsTimes)elem.end_time was 25  become 25
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 16
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 16
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 25
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 6 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 6in data
(checkGsp)[forward faze]Element 1 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 25
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkGsp)[forward faze]Element 1 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 21
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 21
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 25
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time25 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 25; element.start_time25
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 2
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 2 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 2=> number
current element's items: 2 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 1
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 2 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 6 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 6in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 2
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 2 )( 3 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 2=> number
current element's items: 2 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: 3=> number
current element's items: 3 
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #2: 1
(support) The same but from gsp vector2: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 2
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 2 )( 3 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 6 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 6in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time25 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 25; element.start_time25
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 2
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 2 )( 4 )( 3 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 2=> number
current element's items: 2 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: 4=> number
current element's items: 4 
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #2: 1
(support) The same but from gsp vector2: 1
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 3
(support) Length of GSP (vector of elements): 2
(support) [token]: 3=> number
current element's items: 3 
(support) Current element index: 3
(support) Length of GSP (vector of elements): 2
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #3: 1
(support) The same but from gsp vector3: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 3
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 2 )( 4 )( 3 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 2
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 11
(checkGsp)new startTime: 16
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 16
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(resetElementsTimes)elem.start_time was 20  become 20
(resetElementsTimes)elem.end_time was 20  become 20
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 6 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 6in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 2
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 11
(checkGsp)new startTime: 21
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 21
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time25 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 25; element.start_time25
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 2
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 2 )( 4 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 2=> number
current element's items: 2 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: 4=> number
current element's items: 4 
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #2: 1
(support) The same but from gsp vector2: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 2
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 2 )( 4 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 6 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 6in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 2
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 2 )( 4 5 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 2=> number
current element's items: 2 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: 4=> number
current element's items: 4 
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: 5=> number
current element's items: 4 5 
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #2: 2
(support) The same but from gsp vector2: 2
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 2
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 2 )( 4 5 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [5 <= 0]: 0
(checkElement) winSize check. element.end_time 20; element.start_time15
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(resetElementsTimes)elem.start_time was 20  become 20
(resetElementsTimes)elem.end_time was 20  become 20
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 6 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 6in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 2
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 2 )( 4 5 )( 3 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 2=> number
current element's items: 2 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: 4=> number
current element's items: 4 
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: 5=> number
current element's items: 4 5 
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #2: 2
(support) The same but from gsp vector2: 2
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 3
(support) Length of GSP (vector of elements): 2
(support) [token]: 3=> number
current element's items: 3 
(support) Current element index: 3
(support) Length of GSP (vector of elements): 2
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #3: 1
(support) The same but from gsp vector3: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 3
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 2 )( 4 5 )( 3 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [5 <= 0]: 0
(checkElement) winSize check. element.end_time 20; element.start_time15
(checkElement) checking item '4', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 2
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 11
(checkGsp)new startTime: 21
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 21
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 1 2 3 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time25 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 25; element.start_time25
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(resetElementsTimes)elem.start_time was 20  become 20
(resetElementsTimes)elem.end_time was 20  become 20
(resetElementsTimes)elem.start_time was 25  become 25
(resetElementsTimes)elem.end_time was 25  become 25
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 6 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 6in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 2
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '4', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 4 with item 4in data
(checkElement) Item found => Check next item in current element
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 2
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 11
(checkGsp)new startTime: 21
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 21
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 25
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time25 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 25; element.start_time25
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 2
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 2 )( 5 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 2=> number
current element's items: 2 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: 5=> number
current element's items: 5 
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #2: 1
(support) The same but from gsp vector2: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 2
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 2 )( 5 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '5', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(resetElementsTimes)elem.start_time was 20  become 20
(resetElementsTimes)elem.end_time was 20  become 20
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 6 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 6in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 2
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 2 )( 5 )( 3 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 2=> number
current element's items: 2 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: 5=> number
current element's items: 5 
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #2: 1
(support) The same but from gsp vector2: 1
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 3
(support) Length of GSP (vector of elements): 2
(support) [token]: 3=> number
current element's items: 3 
(support) Current element index: 3
(support) Length of GSP (vector of elements): 2
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #3: 1
(support) The same but from gsp vector3: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 3
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 2 )( 5 )( 3 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '5', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 2
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 11
(checkGsp)new startTime: 21
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 21
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 1 2 3 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time25 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 25; element.start_time25
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(resetElementsTimes)elem.start_time was 20  become 20
(resetElementsTimes)elem.end_time was 20  become 20
(resetElementsTimes)elem.start_time was 25  become 25
(resetElementsTimes)elem.end_time was 25  become 25
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 6 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 6in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 2 with item 5in data
(checkGsp)[forward faze]Element 0 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '2', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 2 with item 2in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 2
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 11
(checkGsp)new startTime: 21
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 21
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 25
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time25 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 25; element.start_time25
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 2
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 5 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 5=> number
current element's items: 5 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 1
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 5 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '5', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 20  become 20
(resetElementsTimes)elem.end_time was 20  become 20
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '5', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '5', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 4
(support) --------  reading GSP --------
(support) Current GSP (read line): <( 5 )( 3 )>
(support) [stringstream]: opened
(support) [stringstream] start reading.
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: <(=> sequence beginning => next iteration
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: 5=> number
current element's items: 5 
(support) Current element index: 1
(support) Length of GSP (vector of elements): 0
(support) [token]: )(=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #1: 1
(support) The same but from gsp vector1: 1
(support) current element size after clear: 0 (expected 0)
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: 3=> number
current element's items: 3 
(support) Current element index: 2
(support) Length of GSP (vector of elements): 1
(support) [token]: )>=> ')(' or ')>' => end of element => push element to the vector.
(support) Number of items in element #2: 1
(support) The same but from gsp vector2: 1
(support) current element size after clear: 0 (expected 0)
(support)length of current GSP (number of elements): 2
(support)Current GSP (from structure): (show_gsp)ITEMS: <( 5 )( 3 )>

(support) ---- reading CIds ----
(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: -1
(support) last_cid was -1 and now is changed to 1 (the first CId in dataset)
(support) current_token (item): 1
(support) current_token (item): 2
(support)items to insert: 1 2
(support) itemset pushed: 1 2 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 1
(support)items to insert: 1 3 4
(support) itemset pushed: 1 3 4 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 1 | last_cid: 1
(support) current_token (item): 3
(support) current_token (item): 1
(support) current_token (item): 2
(support) current_token (item): 5
(support)items to insert: 1 2 3 5
(support) itemset pushed: 1 2 3 5 
(support) ==check current_cid_data==
(support) cid: 1 | last_cid: 1 | tid: 10 | items: 1 2
(support) cid: 1 | last_cid: 1 | tid: 15 | items: 1 3 4
(support) cid: 1 | last_cid: 1 | tid: 20 | items: 3 4 5
(support) cid: 1 | last_cid: 1 | tid: 25 | items: 1 2 3 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 1
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '5', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 2in data
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 21
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 21
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: -1
(checkElement) comparing with cid_data (tid | {items}): { 10 | 1 2 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 15 | 1 3 4 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 3 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 1 2 3 5 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 1in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time25 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 25; element.start_time25
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 20  become 20
(resetElementsTimes)elem.end_time was 20  become 20
(resetElementsTimes)elem.start_time was 25  become 25
(resetElementsTimes)elem.end_time was 25  become 25
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 1 | tid: 15 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 2 | last_cid: 2
(support) current_token (item): 6
(support)items to insert: 6
(support) itemset pushed: 6 
(support) ==check current_cid_data==
(support) cid: 2 | last_cid: 2 | tid: 15 | items: 3 4 5
(support) cid: 2 | last_cid: 2 | tid: 20 | items: 6
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 3 | last_cid: 2
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '5', time: 20
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 15; element.start_time15 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 15; element.start_time15
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 16
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 16
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 25
(checkElement) comparing with cid_data (tid | {items}): { 15 | 3 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 6 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 6in data
(checkGsp)[forward faze]Element 1 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 15  become 15
(resetElementsTimes)elem.end_time was 15  become 15
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 3
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 3 4 5
(support) itemset pushed: 3 4 5 
(support) ==check current_cid_data==
(support) cid: 3 | last_cid: 2 | tid: 10 | items: 3 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 3
(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '5', time: 15
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 3in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 10; element.start_time10 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 10; element.start_time10
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 11
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 11
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 25
(checkElement) comparing with cid_data (tid | {items}): { 10 | 3 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkGsp)[forward faze]Element 1 not found => RETURN false
(resetElementsTimes)[GSP CLEANING]
(resetElementsTimes)elem.start_time was 10  become 10
(resetElementsTimes)elem.end_time was 10  become 10
(resetElementsTimes)elem.start_time was 9223372036854775807  become 9223372036854775807
(resetElementsTimes)elem.end_time was -9223372036854775808  become -9223372036854775808
(support) current_token (item): 2
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 2 7 8
(support) itemset pushed: 2 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 3 | tid: 10 | items: 2 7 8
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 4
(support) current_token (item): 5
(support)items to insert: 4 5
(support) itemset pushed: 4 5 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) ==========================

(support)[dataset] Openning string stream
(support) cid: 4 | last_cid: 4
(support) current_token (item): 3
(support) current_token (item): 7
(support) current_token (item): 8
(support)items to insert: 3 7 8
(support) itemset pushed: 3 7 8 
(support) ==check current_cid_data==
(support) cid: 4 | last_cid: 4 | tid: 10 | items: 2 7 8
(support) cid: 4 | last_cid: 4 | tid: 20 | items: 4 5
(support) cid: 4 | last_cid: 4 | tid: 25 | items: 3 7 8
(support) ==========================

(checkGSP)----= winSize: 0
(checkGSP)----= minGap: 0
(checkGSP)----= maxGap: 500
(checkGsp)[forward faze]: iteration: i = 0
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 0
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 0
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '5', time: 10
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 2in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 7in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 8in data
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) --inner loop: finding the match of elem's item 5 with item 4in data
(checkElement) --inner loop: finding the match of elem's item 5 with item 5in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 20; element.start_time20 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 20; element.start_time20
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(checkGsp)[forward faze]: iteration: i = 1
(checkGsp)[forward faze]: gsp_element: start_time = 9223372036854775807 end_time = -9223372036854775808 num of items = 1
(checkGSP)startTime to pass to checkElement(): 0
(checkGsp)new startTime: 21
(checkElement)[== function called ==]
(checkElement)params got: 
(checkElement)--startTime (to search from) 21
(checkElement)--element.start_time: 9223372036854775807
(checkElement)--element.end_time: -9223372036854775808
(checkElement) checking item '3', time: 25
(checkElement) comparing with cid_data (tid | {items}): { 10 | 2 7 8 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 20 | 4 5 }
(checkElement) [startTime > tid] => No sense to check => next iteration
(checkElement) comparing with cid_data (tid | {items}): { 25 | 3 7 8 }
(checkElement) --inner loop: finding the match of elem's item 3 with item 3in data
(checkElement) Item found => Check next item in current element
(checkElement) winSize check. element.end_time 25; element.start_time25 winSize 0
(checkElement) comparison: (end - start) <= winSize ? [0 <= 0]: 1
(checkElement) winSize check. element.end_time 25; element.start_time25
(checkElement) INSIDE IF STATEMENT!
(checkElement) element found => return TRUE should occur
(support)***********************************END of GSP check for last CId
(support)support - 2
(support)=== Removing infrequent GSPs ===
(support)[infreq remove] GSP: <( )>	[ 4 ] => sufficient
(support)[infreq remove] GSP: <( 3 )>	[ 4 ] => sufficient
(support)[infreq remove] GSP: <( 3 4 )>	[ 3 ] => sufficient
(support)[infreq remove] GSP: <( 3 4 5 )>	[ 3 ] => sufficient
(support)[infreq remove] GSP: <( 3 5 )>	[ 3 ] => sufficient
(support)[infreq remove] GSP: <( 4 )>	[ 4 ] => sufficient
(support)[infreq remove] GSP: <( 4 )( 3 )>	[ 2 ] => sufficient
(support)[infreq remove] GSP: <( 4 5 )>	[ 4 ] => sufficient
(support)[infreq remove] GSP: <( 4 5 )( 3 )>	[ 2 ] => sufficient
(support)[infreq remove] GSP: <( 2 )>	[ 2 ] => sufficient
(support)[infreq remove] GSP: <( 2 )( 3 )>	[ 2 ] => sufficient
(support)[infreq remove] GSP: <( 2 )( 4 )( 3 )>	[ 2 ] => sufficient
(support)[infreq remove] GSP: <( 2 )( 4 )>	[ 2 ] => sufficient
(support)[infreq remove] GSP: <( 2 )( 4 5 )>	[ 2 ] => sufficient
(support)[infreq remove] GSP: <( 2 )( 4 5 )( 3 )>	[ 2 ] => sufficient
(support)[infreq remove] GSP: <( 2 )( 5 )>	[ 2 ] => sufficient
(support)[infreq remove] GSP: <( 2 )( 5 )( 3 )>	[ 2 ] => sufficient
(support)[infreq remove] GSP: <( 5 )>	[ 4 ] => sufficient
(support)[infreq remove] GSP: <( 5 )( 3 )>	[ 2 ] => sufficient
(support)=== END of Removing infrequent GSPs ===
